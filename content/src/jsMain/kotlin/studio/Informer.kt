package studio

import common.*
import kotlinx.browser.document
import kotlinx.browser.window
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.await
import kotlinx.coroutines.launch
import kotlinx.datetime.Clock
import kotlinx.html.dom.append
import kotlinx.html.h3
import kotlinx.html.id
import kotlinx.html.js.a
import kotlinx.html.js.div
import kotlinx.html.js.span
import kotlinx.html.style
import kotlinx.html.title
import org.w3c.dom.HTMLElement
import kotlin.time.Duration.Companion.days

class Informer(val requester: Requester) {

    @OptIn(DelicateCoroutinesApi::class)
    fun create() {
        GlobalScope.launch {
            console.log("InformerKt")
            if (!Option.INFORMER.value().await()) return@launch
            val data = getData()
            if (document.getElementById("prozen-informer") != null) return@launch
            val rightColumn = document
                .querySelector("div[class^=editor--author-studio-dashboard__rightContent-]") as? HTMLElement
            rightColumn?.let { appendStyledInformer(it, data) } ?: console.log("Failed to find place for Prozen Informer")
        }
    }

    suspend fun getData(): InformerData {
        val date = Clock.System.now()
        val todayStr = date.toDateString()
        val before7 = date.minus(7.days)
        val before7Str = before7.toDateString()
        val before30 = date.minus(30.days)
        val before30Str = before30.toDateString()
        val channelUrl = window.location.href.replace("profile/editor/", "")
        val strikes = requester.getStrikesInfo()
        return InformerData(
            strikes = strikes?.second,
            channelLimited = strikes?.first,
            channelUnIndexed = checkNoIndexUrl(channelUrl),
            scr = requester.getScr(before30Str, todayStr),
            blockedReaders = requester.getBannedUsers(),
            statsTime = requester.getStatsActuality(),
            minuteCourse = requester.getTimespentRewards(before7Str, todayStr),
            zenReaderUrl = zenReaderUrl(channelUrl),
        )
    }

    fun appendStyledInformer(parent: HTMLElement, data: InformerData) {
        with(data) {
            parent.append {
                div("prozen-widget") {
                    div("prozen-widget-header") {
                        +"–ü–†–û–î–ó–ï–ù-–∏–Ω—Ñ–æ"
                    }
                    div("prozen-widget-content") {
                        strikes?.let {
                            div("prozen-widget-item") {
                                span("prozen-widget-item-title") {
                                    +"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: "
                                }
                                span {
                                    +it.toString()
                                }
                            }
                        }
                        channelLimited?.let {
                            div("prozen-widget-item") {
                                span("prozen-widget-item-title") {
                                    +"–ö–∞–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: "
                                }
                                span(if (it) "prozen-widget-warning" else "prozen-widget-success") {
                                    +if (it) "–î–∞" else "–ù–µ—Ç"
                                }
                            }
                        }
                        channelUnIndexed?.let {
                            div("prozen-widget-item") {
                                span("prozen-widget-item-title") {
                                    +"–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞: "
                                }
                                span(if (it) "prozen-widget-error" else "prozen-widget-success") {
                                    +if (it) "–ö–∞–Ω–∞–ª –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è ü§ñ" else "–ö–∞–Ω–∞–ª –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è"
                                }
                            }
                        }
                        scr?.let {
                            div("prozen-widget-item") {
                                span("prozen-widget-item-title") {
                                    +"–û—Ö–≤–∞—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (SCR): "
                                }
                                span {
                                    +"${it.format()}%"
                                }
                            }
                        }
                        blockedReaders?.let {
                            div("prozen-widget-item") {
                                span("prozen-widget-item-title") {
                                    +"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π: "
                                }
                                span {
                                    +it.toString()
                                }
                            }
                        }
                        statsTime?.let {
                            div("prozen-widget-item") {
                                span("prozen-widget-item-title") {
                                    +"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç: "
                                }
                                span {
                                    +it
                                }
                            }
                        }
                        minuteCourse.lastNonZero()?.let { last ->
                            val previous = minuteCourse.previousToLastNonZero()
                            div("prozen-widget-item") {
                                span("prozen-widget-item-title") {
                                    +"–ö—É—Ä—Å –º–∏–Ω—É—Ç—ã ${last.first}: "
                                }
                                span (if (previous?.third != null && previous.third <= last.third) "prozen-widget-success" else "prozen-widget-error") {
                                    +"${last.third.format(3)}‚ÇΩ"
                                }

                            }
                        }
                        zenReaderUrl?.let {
                            div("prozen-widget-item") {
                                a(href = it, classes = "prozen-widget-link") {
                                    +"üîó –ü–æ–¥–ø–∏—Å–∫–∞ –≤ ZenReader"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    suspend fun appendInformer(parent: HTMLElement) {

        val data = getData()
        if (data.isNotNull()) {
            with(data) {
                parent.append {
                    div("editor--notifications-preview-block-desktop__block-39") {
                        id = "prozen-informer"
                        style = "margin-top: 24px;"
                        h3("editor--author-studio-section-title__title-uh Text Text_weight_medium Text_color_full Text_typography_headline-18-22 editor--author-studio-section-title__text-2P") {
                            title = "–î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º ‚Äû–ü—Ä–æ–¥–∑–µ–Ω‚Äú"
                            style = "margin-bottom: 10px;"
                            +"–ü—Ä–æ–¥–∑–µ–Ω"
                        }
                        strikes?.let {
                            span("Text Text_typography_text-15-20 editor--notification__textWrapper-1- editor--notification__text-3k prozen-mb5-block") {
                                title = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è¬ª"
                                +"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $it"
                            }
                        }
                        channelLimited?.let {
                            span("Text Text_typography_text-15-20 editor--notification__textWrapper-1- editor--notification__text-3k prozen-mb5-block") {
                                title = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è¬ª"
                                +if (it) "–ö–∞–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" else "–ö–∞–Ω–∞–ª –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"
                            }
                        }
                        channelUnIndexed?.let {
                            span("Text Text_typography_text-15-20 editor--notification__textWrapper-1- editor--notification__text-3k prozen-mb5-block") {
                                if (it) {
                                    title = "–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–µ—Ç–∞-—Ç–µ–≥ <meta name=\"robots\" content=\"noindex\" />\n" +
                                            "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞ –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞–º–∏.\n" +
                                            "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
                                    +"–ö–∞–Ω–∞–ª –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è ü§ñ"
                                } else {
                                    +"–ö–∞–Ω–∞–ª –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è"
                                }
                            }
                        }
                        scr?.let {
                            span("Text Text_typography_text-15-20 editor--notification__textWrapper-1- editor--notification__text-3k prozen-mb5-block") {
                                title = "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ö–≤–∞—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (Subscribers Coverage Rate).\n" +
                                        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∞—è –¥–æ–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤–∏–¥–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π."
                                +"–û—Ö–≤–∞—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (SCR): ${it.format()}%"
                            }
                        }
                        blockedReaders?.let {
                            span("Text Text_typography_text-15-20 editor--notification__textWrapper-1- editor--notification__text-3k prozen-mb5-block") {
                                title = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤"
                                +"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π: $it"
                            }
                        }
                        statsTime?.let {
                            span("Text Text_typography_text-15-20 editor--notification__textWrapper-1- editor--notification__text-3k prozen-mb5-block") {
                                title = "–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                                +"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç: $it"
                            }
                        }

                        minuteCourse.lastNonZero()?.let { last ->
                            val previous = minuteCourse.previousToLastNonZero()
                            var titleText = "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∏–Ω—É—Ç—ã –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
                            if (previous != null) {
                                titleText += "\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å (${previous.first}): ${previous.third} ‚ÇΩ"
                                span("Text Text_typography_text-15-20 editor--notification__textWrapper-1- editor--notification__text-3k prozen-mb5-block") {
                                    title = titleText
                                    +"–ö—É—Ä—Å –º–∏–Ω—É—Ç—ã ${last.first}: ${last.third.format(4)}‚ÇΩ"
                                }
                            }
                        }
                        zenReaderUrl?.let {
                            a {
                                href = it
                                span("Text Text_color_full Text_typography_text-14-18 editor--author-studio-article-card__title prozen-mb5-block") {
                                    title = "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª\n–≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ ZenReader"
                                    +"üîó –ü–æ–¥–ø–∏—Å–∫–∞ –≤ ZenReader"
                                }
                            }
                        }
                    }
                }
            }
        }

    }
}

data class InformerData(
    val strikes: Int?,
    val channelLimited: Boolean?,
    val channelUnIndexed: Boolean?,
    val scr: Double?,
    val blockedReaders: Int?,
    val statsTime: String?,
    val minuteCourse: List<Triple<String, Double, Double>>,
    val zenReaderUrl: String?
)

fun InformerData.isNotNull(): Boolean {
    return listOf(
        strikes,
        channelLimited,
        channelUnIndexed,
        scr,
        blockedReaders,
        statsTime,
        zenReaderUrl
    ).any { it != null } || minuteCourse.isNotEmpty()
}

fun List<Triple<String, Double, Double>>.lastNonZero(): Triple<String, Double, Double>? {
    return this.lastOrNull { it.third != 0.0 }
}

fun List<Triple<String, Double, Double>>.previousToLastNonZero(): Triple<String, Double, Double>? {
    val lastNonZeroIndex = this.indexOfLast { it.third != 0.0 }
    return if (lastNonZeroIndex > 0) this[lastNonZeroIndex - 1] else null
}