package studio

import common.*
import kotlinx.browser.document
import kotlinx.browser.window
import kotlinx.coroutines.*
import kotlinx.datetime.Clock
import kotlinx.html.dom.append
import kotlinx.html.h3
import kotlinx.html.id
import kotlinx.html.js.a
import kotlinx.html.js.div
import kotlinx.html.js.img
import kotlinx.html.js.span
import kotlinx.html.style
import kotlinx.html.title
import org.w3c.dom.HTMLElement
import kotlin.time.Duration.Companion.days

class Informer(val requester: Requester) {

    @OptIn(DelicateCoroutinesApi::class)
    fun create(count: Int = 0) {
        GlobalScope.launch {
            if (!Option.INFORMER.value().await()) return@launch
            val data = getData()
            if (document.getElementById("prozen-informer") != null) return@launch
            val rightColumn = document
                .querySelector("div[class^=editor--author-studio-dashboard__rightContent-]") as? HTMLElement
            if (rightColumn != null) {
                appendStyledInformer(rightColumn, data)
            } else {
                if (count <=3) {
                    delay(500)
                    create(count + 1)
                } else {
                    console.log("Failed to find place for Prozen Informer")
                }
            }
        }
    }

    suspend fun getData(): InformerData {
        val date = Clock.System.now()
        val todayStr = date.toDateString()
        val before7 = date.minus(7.days)
        val before7Str = before7.toDateString()
        val before30 = date.minus(30.days)
        val before30Str = before30.toDateString()
        val channelUrl = window.location.href.replace("profile/editor/", "")
        val strikes = requester.getStrikesInfo()
        return InformerData(
            strikes = strikes?.second,
            channelLimited = strikes?.first,
            channelUnIndexed = checkNoIndexUrl(channelUrl),
            scr = requester.getScr(before30Str, todayStr),
            blockedReaders = requester.getBannedUsers(),
            statsTime = requester.getStatsActuality(),
            minuteCourse = requester.getTimespentRewards(before7Str, todayStr),
            zenReaderUrl = zenReaderUrl(channelUrl),
        )
    }

    fun appendStyledInformer(parent: HTMLElement, data: InformerData) {
        with(data) {
            parent.append {
                div("prozen-widget") {
                      div("prozen-widget-header") {
                        title = "–î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º ¬´–ü—Ä–æ–¥–∑–µ–Ω¬ª"
                        div("prozen-header-content") {
                            img {
                                src = chrome.runtime.getURL("img/toast-logo.png")
                            }
                            span {
                                +"–ò–Ω—Ñ–æ—Ä–º–µ—Ä"
                            }
                        }
                    }
                    div("prozen-widget-content") {
                        strikes?.let {
                            div("prozen-widget-item") {
                                title = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è¬ª"
                                span("prozen-widget-item-title") {
                                    +"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: "
                                }
                                span(if (it > 0) "prozen-widget-warning" else null) {
                                    +it.toString()
                                }
                            }
                        }
                        channelLimited?.let {
                            div("prozen-widget-item") {
                                title = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è¬ª"
                                span("prozen-widget-item-title") {
                                    +"–ö–∞–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: "
                                }
                                span(if (it) "prozen-widget-warning" else null) {
                                    +if (it) "–î–∞" else "–ù–µ—Ç"
                                }
                            }
                        }
                        channelUnIndexed?.let {
                            div("prozen-widget-item") {
                                if (it) {
                                    title = "–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–µ—Ç–∞-—Ç–µ–≥ <meta name=\"robots\" content=\"noindex\" />\n" +
                                            "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞ –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞–º–∏.\n" +
                                            "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
                                }
                                span("prozen-widget-item-title") {
                                    +"–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞: "
                                }
                                span {
                                    +if (it) "–ù–µ—Ç ü§ñ" else "–ï—Å—Ç—å"
                                }
                            }
                        }
                        scr?.let {
                            title = "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ö–≤–∞—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (Subscribers Coverage Rate).\n" +
                                    "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∞—è –¥–æ–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤–∏–¥–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π."
                            div("prozen-widget-item") {
                                span("prozen-widget-item-title") {
                                    +"–û—Ö–≤–∞—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (SCR): "
                                }
                                span {
                                    +"${it.format()}%"
                                }
                            }
                        }
                        blockedReaders?.let {
                            div("prozen-widget-item") {
                                title = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤"
                                span("prozen-widget-item-title") {
                                    +"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π: "
                                }
                                span {
                                    +it.toString()
                                }
                            }
                        }
                        statsTime?.let {
                            div("prozen-widget-item") {
                                title = "–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                                span("prozen-widget-item-title") {
                                    +"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç: "
                                }
                                span {
                                    +it
                                }
                            }
                        }
                        minuteCourse.lastNonZero()?.let { last ->
                            var titleText = "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∏–Ω—É—Ç—ã –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
                            val previous = minuteCourse.previousToLastNonZero()
                            if (previous != null) {
                                titleText += "\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å (${previous.first}): ${previous.third.format(4)} ‚ÇΩ"
                            }

                            div("prozen-widget-item") {
                                title = titleText
                                span("prozen-widget-item-title") {
                                    +"–ö—É—Ä—Å –º–∏–Ω—É—Ç—ã ${last.first}: "
                                }
                                span(when {
                                    previous?.third == null -> null
                                    previous.third <= last.third -> "prozen-widget-success"
                                    else -> "prozen-widget-error"
                                }) {
                                    +"${last.third.format(4)}‚ÇΩ"
                                }
                            }
                        }
                        zenReaderUrl?.let {
                            div("prozen-widget-item") {
                                title = "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª\n–≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ ZenReader"
                                a(href = it, classes = "prozen-widget-link") {
                                    +"üîó –ü–æ–¥–ø–∏—Å–∫–∞ –≤ ZenReader"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

}

data class InformerData(
    val strikes: Int?,
    val channelLimited: Boolean?,
    val channelUnIndexed: Boolean?,
    val scr: Double?,
    val blockedReaders: Int?,
    val statsTime: String?,
    val minuteCourse: List<Triple<String, Double, Double>>,
    val zenReaderUrl: String?
)

fun InformerData.isNotNull(): Boolean {
    return listOf(
        strikes,
        channelLimited,
        channelUnIndexed,
        scr,
        blockedReaders,
        statsTime,
        zenReaderUrl
    ).any { it != null } || minuteCourse.isNotEmpty()
}

fun List<Triple<String, Double, Double>>.lastNonZero(): Triple<String, Double, Double>? {
    return this.lastOrNull { it.third != 0.0 }
}

fun List<Triple<String, Double, Double>>.previousToLastNonZero(): Triple<String, Double, Double>? {
    val lastNonZeroIndex = this.indexOfLast { it.third != 0.0 }
    return if (lastNonZeroIndex > 0) this[lastNonZeroIndex - 1] else null
}