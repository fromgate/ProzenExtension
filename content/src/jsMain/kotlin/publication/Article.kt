package publication

import common.*
import common.Option
import kotlinx.serialization.json.JsonObject
import kotlinx.browser.document
import kotlinx.html.dom.create
import kotlinx.html.js.div
import kotlinx.html.js.onClickFunction
import kotlinx.html.js.span
import kotlinx.html.style
import kotlinx.html.title
import org.w3c.dom.*


class Article(requester: Requester, data: JsonObject) : PublicationPage(requester, data) {
    /* üïë 05.09.24 18:11 (05.09.24 18:18) üìÉ 408 üìÑ 213 üîó ü§ñ */
    override fun showStats() {
        val stats = this.stats ?: return
        val infoBlock =
            document.querySelector("div[class^=content--article-info-block__articleInfoBlock-]") as? HTMLDivElement
        infoBlock?.removeChildren()
        val dateBlock = document.create.div("article-info-block__addTimeInfo-25") {
            +"üïë ${stats.showTime()}"
            title = "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
            attributes["itemprop"] = "datePublished"
        }
        infoBlock?.appendChild(dateBlock)

        if (stats.views != stats.viewsTillEnd) {
            val viewsBlock = document.create.div("article-info-block__viewsInfo-1g") {
                +"üìÉ ${stats.views?.format()}"
                title = "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"
            }
            infoBlock?.appendChild(viewsBlock)
        }

        val viewsTillEndBlock = document.create.div("article-info-block__viewsInfo-1g") {
            +"üìÑ ${stats.viewsTillEnd?.format()}"
            title = "–î–æ—á–∏—Ç—ã–≤–∞–Ω–∏—è"
        }
        infoBlock?.appendChild(viewsTillEndBlock)

        val shortLinkBlock = document.create.div("article-info-block__viewsInfo-1g") {
            +"üîó"
            title = SHORT_LINK_TITLE
            onClickFunction = {
                copyTextToClipboard(stats.shortLink)
            }
            style = "cursor: pointer;"
        }
        infoBlock?.appendChild(shortLinkBlock)

        if (stats.notIndexed) {
            val sadRobotBlock = document.create.div("article-info-block__viewsInfo-1g") {
                +"ü§ñ"
                title = NO_INDEX_TITLE
            }
            infoBlock?.appendChild(sadRobotBlock)
        }

        addSubtitleLinks()
    }


    fun addSubtitleLinks() {
        Option.SUBTITLE_LINKS.value().then { option ->
            if (option) {
                val shortLink = (document.head!!.querySelector("link[rel=canonical][href]") as HTMLLinkElement).href
                val headers = document.querySelectorAll("h2, h3")
                headers.asList().forEach {
                    val header = it as HTMLHeadingElement
                    val anchorId = header.id
                    val linkIcon = document.create.span ("publication_header_icon_url"){
                        title = "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫.\n" +
                                "–ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
                        onClickFunction = {
                            copyTextToClipboard("$shortLink#$anchorId")
                        }
                    }
                    if (header.hasChildNodes()) {
                        header.insertBefore(linkIcon, header.firstChild)
                    } else {
                        val text = header.innerText
                        header.innerText = ""
                        header.appendChild(linkIcon)
                        header.appendChild(document.create.span {
                            +text
                        })
                    }
                }
            }
        }
    }
}